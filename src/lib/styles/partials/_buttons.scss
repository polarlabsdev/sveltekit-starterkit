@use 'variables';
@use 'sass:color';

$default-button-display: inline-flex;

.button {
	display: $default-button-display;
	justify-content: center;
	align-items: center;
	box-sizing: border-box;
	padding: 0.675rem variables.$spacing-md-2;
	border-radius: variables.$global-border-radius;
	cursor: pointer;
	transition: all 0.2s ease;
	font-size: 1.125rem;
	font-weight: 600;
	text-decoration: none !important;
	text-align: center;
	color: variables.$white;
	font-family: 'Rubik', sans-serif;
	user-select: none;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 0.875rem;
		padding: variables.$spacing-xs variables.$spacing-sm-3;
	}

	@each $color-name, $color in variables.$auto-colors {
		&.#{'' + $color-name} {
			background: #{$color};
		}

		&.#{'' + $color-name}:hover {
			background: color.adjust($color, $lightness: 8%);
		}
	}

	&:active {
		transform: scale(0.9);
	}

	&.dark-text {
		color: variables.$dark-grey;
	}

	i {
		margin-right: variables.$spacing-xs;
		font-weight: 100;
	}

	&.lg {
		padding: variables.$spacing-md 1.6rem;
		font-size: 1.25rem;

		@media screen and (min-width: variables.$md-screen) {
			padding: variables.$spacing-sm-2 variables.$spacing-md-2;
			font-size: 1rem;
		}
	}

	&.sm {
		padding: variables.$spacing-sm variables.$spacing-md;
		font-size: 1rem;

		@media screen and (min-width: variables.$md-screen) {
			padding: 0.18rem 0.525rem;
			font-size: 0.75rem;
		}
	}

	// color, height and width set by component props
	// has only an icon in it
	&.icon-button {
		padding: 0;
		width: 2.5rem;
		height: 2.5rem;
		border-radius: 100%;
		display: inline-flex;
		align-items: center;
		justify-content: center;

		i {
			margin-right: 0;
			font-size: 1.125rem;
		}
	}

	&.block-button {
		display: flex;
	}

	&.block-button-mobile {
		display: flex;

		@media screen and (min-width: variables.$sm-screen) {
			display: $default-button-display;
		}
	}
}
