@use 'variables';
@use 'sass:color';

html {
	font-family: variables.$body-font;
	color: variables.$grey;
	font-weight: 400;
	line-height: 1.5625rem;

	-webkit-font-smoothing: antialiased;
	-moz-font-smoothing: antialiased;
	-o-font-smoothing: antialiased;

	// set rem base and use min widths to match grid
	// after this, use only rem units on the rest of the site unless
	// there's a good reason not to. Rem units will scale based on the
	// html font size, giving us a single place to easily adjust the
	// scale of the entire website on different screen sizes.
	// To be clear, these ones should remain px!
	font-size: 12px;

	@media all and (min-width: variables.$xs-screen) {
		font-size: 15px;
	}

	// small screens are like tablets which are surpringly better suited to have
	// a smaller rem multiplier
	@media all and (min-width: variables.$sm-screen) {
		font-size: 13px;
	}

	@media all and (min-width: variables.$md-screen) {
		font-size: 16px;
	}

	@media all and (min-width: variables.$lg-screen) {
		font-size: 17px;
	}

	@media all and (min-width: variables.$xl-screen) {
		font-size: 18px;
	}

	@media all and (min-width: variables.$xxl-screen) {
		font-size: 19px;
	}
}

h1 {
	font-family: variables.$header-font;
	font-size: 2.8rem;
	color: variables.$dark-grey;
	font-weight: 700;
	line-height: 120%;
	margin: variables.$spacing-sm-3 0;
}

h2 {
	font-family: variables.$header-font;
	font-size: 2.2rem;
	color: variables.$dark-grey;
	font-weight: 700;
	line-height: 120%;
	margin: variables.$spacing-sm-3 0;
}

h3 {
	font-family: variables.$header-font;
	font-size: 1.5rem;
	color: variables.$dark-grey;
	font-weight: 600;
	line-height: 120%;
	margin: variables.$spacing-sm-2 0;
}

h4 {
	font-family: variables.$header-font;
	font-size: 1.5rem;
	color: variables.$dark-grey;
	font-weight: 600;
	line-height: 140%;
	margin: variables.$spacing-sm-2 0;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 1.25rem;
	}
}

h5 {
	font-family: variables.$header-font;
	font-size: 1.15rem;
	color: variables.$dark-grey;
	font-weight: 600;
	line-height: 140%;
	margin: variables.$spacing-sm-2 0;
}

h6 {
	font-family: variables.$header-font;
	font-size: 1.05rem;
	color: variables.$dark-grey;
	font-weight: 600;
	line-height: 140%;
	margin: variables.$spacing-sm-2 0;
}

p,
li,
label {
	font-family: variables.$body-font;
	font-size: 1rem;
	color: variables.$grey;
	font-weight: 500;
	margin: variables.$spacing-sm-3 0;
	line-height: 160%;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 0.9rem;
		line-height: 150%;
	}
}

article p {
	margin: variables.$spacing-md-3 0;
}

article p,
li {
	word-wrap: break-word;
	line-height: 180%;
}

.lg-text,
.lg-text * {
	font-size: 1.125rem !important;
}

.caption,
.caption * {
	font-size: 1rem !important;
	font-weight: 500;
	line-height: 140%;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 0.825rem !important;
	}
}

.footnote,
.footnote * {
	font-size: 0.9rem !important;
	font-weight: 500;
	line-height: 140%;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 0.6875rem !important;
	}
}

a {
	text-decoration: none;
	transition: all 0.2s ease;

	&:hover {
		color: variables.$primary !important;
	}

	&.child-hovers {
		&:hover * {
			color: variables.$primary;
		}

		& * {
			transition: color 0.3s ease;
		}
	}

	&.no-color {
		color: inherit;
	}
}

p a {
	text-decoration: underline;
	color: variables.$primary;

	&:hover {
		color: color.adjust(variables.$primary, $lightness: -15%) !important;
	}
}

.icon-xs {
	font-size: 0.75rem;
}

.icon-sm {
	font-size: 1rem;
}

.icon-md {
	font-size: 1.5rem;
}

.icon-lg {
	font-size: 2rem;
}

.icon-xl {
	font-size: 3rem;
}

.no-underline,
.no-underline * {
	text-decoration: none;
}

ul.inline {
	margin: 0;
	padding: 0;

	li {
		display: inline-block;
		list-style-type: none;
	}
}

blockquote {
	margin: 4vh 0;
	border-left: 0.25rem solid variables.$subtle-borders;
	text-align: left;
	padding-left: variables.$spacing-xl;

	&,
	* {
		font-style: italic;
		font-size: 1rem !important;
		line-height: 160%;
	}
}

.info-block {
	width: 100%;
	margin: 1.2rem 0 2.2rem 0;
	padding: 1.125rem 1.25rem;
	padding-left: 3.5rem;
	border: 1px solid variables.$blue-dark;
	color: variables.$blue-dark;
	border-radius: variables.$global-border-radius;
	position: relative;

	font-size: 1rem !important;
	font-weight: 500;
	line-height: 140%;

	@media screen and (min-width: variables.$md-screen) {
		font-size: 0.825rem !important;
	}

	i {
		position: absolute;
		left: 0.85rem;
		top: 50%;
		transform: translateY(-50%);
		font-size: 1.95rem;
	}

	a {
		color: inherit;
		text-decoration: underline;
		font-weight: 700;
	}

	&.docs {
		border-color: variables.$dark-grey;
		color: variables.$dark-grey;
	}

	&.warning {
		border-color: variables.$tertiary;
		color: variables.$tertiary;
	}

	&.danger {
		border-color: variables.$red;
		color: variables.$red;
	}
}

code {
	font-size: 0.85rem;
}

pre code {
	padding: 1.5rem !important;
	border-radius: variables.$global-border-radius;
}

:not(pre) > code {
	background: variables.$surface-alt;
	border: 1px solid variables.$subtle-borders;
	padding: 0.125rem 0.25rem;
	border-radius: 0.2rem;
}

hr {
	display: block;
	height: 0.0625rem;
	border: 0;
	border-top: 0.0625rem solid variables.$subtle-borders;
	margin: variables.$spacing-xl 0;
	padding: 0;
	position: relative;
	overflow: visible;
	z-index: 0;

	&::before,
	&::after {
		content: '';
		display: block;
		width: 4px; // leave these px so they stay fixed in size
		height: 4px;
		background: variables.$subtle-borders;
		border-radius: 100%;
		position: absolute;
		top: 50%;
		transform: translateY(-60%); // bump it up a bit since it sits a bit low for some reason
	}

	&::before {
		left: 0;
	}

	&::after {
		right: 0;
	}
}

.text-center {
	text-align: center !important;
}

.text-left {
	text-align: left !important;
}

.text-right {
	text-align: right !important;
}

.bold,
.bold * {
	font-weight: 700;
}

.medium,
.medium * {
	font-weight: 600;
}

.underline,
.underline * {
	text-decoration: underline;
}

$thin-weight: 400;
.thin,
.thin *:not(b):not(strong) {
	font-weight: $thin-weight;
}

.uppercase,
.uppercase * {
	text-transform: uppercase;
}

@each $color-name, $color in variables.$auto-colors {
	.text-#{'' + $color-name},
	.text-#{'' + $color-name} * {
		color: #{$color};

		path,
		svg path {
			fill: #{$color} !important;
		}
	}
}
