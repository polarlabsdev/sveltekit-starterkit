@use 'sass:math';

// Doesn't seem like juice worth the sqeeuze at this point but I would like
// to extract this lib at some point and open source it as I had to sort of 
// revitalize it a little here as it seems like grid systems are a lost art.
// I can be the only one out there that still prefers these to "no CSS knowledge needed"
// frameworks of today.

$gutter-compensation: $gutter-width * 0.5 * -1;
$half-gutter-width: $gutter-width * 0.5;
$num-grid-columns: 12;

.margin {
  box-sizing: border-box;
  width: 92%; // never touch sides on mobile
  max-width: $content-margin; // recommended to use rem to control scale from html font size
  margin-left: auto;
  margin-right: auto;
}

// This is probably not necessary since our normalize script
// makes everything border-box by default, and I suspect this
// was to compensate for row negative margins pulling content
// beyond the edges of a parent container. Leaving it here
// as it was probably in the original lib for a reason under the
// name .container-fluid
.padded-container {
  padding-right: $outer-margin;
  padding-left: $outer-margin;
}

.row {
  box-sizing: border-box;
  display: flex;
  flex: 0 1 auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin-right: $gutter-compensation;
  margin-left: $gutter-compensation;
}

.row.reverse {
  flex-direction: row-reverse;
}

.col.reverse {
  flex-direction: column-reverse;
}

.row.vertical-stretch {
  align-items: stretch;
}

.stretch-me {
  min-height: 100%;
  box-sizing: border-box;
}

// This grid system is based on mobile-first thinking. The default xxs is applied at 0em
// and then at the next size screen we apply the new rules. 
$breakpoints: (
  xxs: 0em,
  xs: $xs-screen,
  sm: $sm-screen,
  md: $md-screen,
  lg: $lg-screen,
  xl: $xl-screen,
  xxl: $xxl-screen,
);

@mixin col-common {
  box-sizing: border-box;
  flex: 0 0 auto;
  padding-right: var(--half-gutter-width, 0.5rem);
  padding-left: var(--half-gutter-width, 0.5rem);
}

@each $size, $breakpoint in $breakpoints {
  @media only screen and (min-width: $breakpoint) {
  
    .col-#{$size} {
      @include col-common;
      flex-grow: 1;
      flex-basis: 0;
      max-width: 100%;
    }

    @for $i from 1 through $num-grid-columns {
      .col-#{$size}-#{$i} {
        @include col-common;
        flex-basis: math.div(100%, $num-grid-columns) * $i;
        max-width: math.div(100%, $num-grid-columns) * $i;
      }
    }

    @for $i from 0 through $num-grid-columns {
      .col-#{$size}-offset-#{$i} {
        @include col-common;
        margin-left: math.div(100%, $num-grid-columns) * $i;
      }
    }
  
    .start-#{$size} {
      justify-content: flex-start;
      text-align: start;
    }
  
    .center-#{$size} {
      justify-content: center;
      text-align: center;
    }
  
    .end-#{$size} {
      justify-content: flex-end;
      text-align: end;
    }
  
    .top-#{$size} {
      align-items: flex-start;
    }
  
    .middle-#{$size} {
      align-items: center;
    }
  
    .bottom-#{$size} {
      align-items: flex-end;
    }
  
    .around-#{$size} {
      justify-content: space-around;
    }
  
    .between-#{$size} {
      justify-content: space-between;
    }
  
    .first-#{$size} {
      order: -1;
    }
  
    .last-#{$size} {
      order: 1;
    }

  }

  // SHOW/HIDE RULES SYNCED TO GRID
  // ------------------------------
  // all classes assume big to small screen.
  // hide-x means show by default and hide when you reach a screen size
  // show-x means hide by default and show when you reach a screen size
  .show-#{$size},
  .show-#{$size}-inline-block,
  .show-#{$size}-inline,
  .show-#{$size}-flex,
  .show-#{$size}-inline-flex {
    display: none !important;
  }

  @media all and (min-width: $breakpoint) {
    .show-#{$size} {
      display: block !important;
    }
    .show-#{$size}-inline-block {
      display: inline-block !important;
    }
    .show-#{$size}-inline {
      display: inline !important;
    }
    .show-#{$size}-flex {
      display: flex !important;
    }
    .show-#{$size}-inline-flex {
      display: inline-flex !important;
    }
  }
  
  @media all and (min-width: $breakpoint) {
    .hide-#{$size} {
      display: none !important;
    }
  }
  
}